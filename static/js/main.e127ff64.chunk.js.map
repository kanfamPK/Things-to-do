{"version":3,"sources":["img/check.svg","img/check-done.svg","img/down-arrow.svg","components/TodoItem.js","components/TrafficLight.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TodoItem","item","this","props","onClick","className","url","checkIcon","isComplete","checkDoneIcon","src","width","title","Component","RED","TrafficLight","state","currentColor","setInterval","setState","getNextColor","color","classNames","active","App","newItem","todoItems","index","indexOf","console","log","slice","event","text","target","value","trim","keyCode","unshift","id","React","version","DownArrow","Input","type","placeholder","onKeyUp","bind","onChange","class","length","map","key","onItemClicked","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e127ff64.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/check.40eb9cc6.svg\";","module.exports = __webpack_public_path__ + \"static/media/check-done.d29f1779.svg\";","module.exports = __webpack_public_path__ + \"static/media/down-arrow.d7b0c05d.svg\";","import React, { Component } from 'react';\r\nimport checkIcon from '../img/check.svg';\r\nimport checkDoneIcon from '../img/check-done.svg';\r\n\r\nclass TodoItem extends Component {\r\n\r\n    render() {\r\n        const item = this.props.item,\r\n            onClick = this.props.onClick;\r\n        let className = 'TodoItem';\r\n        let url = checkIcon;\r\n        if (item.isComplete){\r\n            url = checkDoneIcon;\r\n        }\r\n        if (item.isComplete){\r\n            className += ' TodoItem-complete';\r\n        }\r\n        return (\r\n            <div className={className}>\r\n                <img onClick={onClick} src={url} width={32}/>\r\n                <p>{this.props.item.title}</p>\r\n            </div>      \r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoItem;","import React, { Component } from 'react';\r\nimport classNames from 'classnames';\r\n\r\nconst RED = 0, ORANGE = 1, GREEN = 2;\r\n\r\nclass TrafficLight extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            currentColor: RED\r\n        };\r\n        setInterval(() => {\r\n            this.setState({\r\n                currentColor: this.getNextColor(this.state.currentColor)\r\n            });\r\n        },1000)\r\n    }\r\n\r\n    getNextColor(color){\r\n        switch(color){\r\n            case RED:\r\n                return ORANGE;\r\n            case ORANGE:\r\n                return GREEN;\r\n            default:\r\n                return RED;\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const currentColor = this.state.currentColor;\r\n        return (\r\n            <div className=\"TrafficLight\">\r\n                <div className={classNames('bulb', 'red', {active: currentColor === RED})}/>\r\n                <div className={classNames('bulb', 'orange', {active: currentColor === ORANGE})}/>\r\n                <div className={classNames('bulb', 'green', {active: currentColor === GREEN})}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TrafficLight;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport { Input } from \"reactstrap\";\r\n\r\nimport TodoItem from './components/TodoItem.js';\r\nimport './components/todoItem.css';\r\nimport TrafficLight from './components/TrafficLight.js';\r\nimport './components/TrafficLight.css';\r\nimport DownArrow from './img/down-arrow.svg';\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      newItem: '',\r\n      todoItems:\r\n        [\r\n          { title: \"Learn coding\", isComplete: true },\r\n          { title: \"Watch twitch\", isComplete: false },\r\n          { title: \"Play Poe\", isComplete: false }\r\n        ]\r\n    };\r\n  }\r\n\r\n  onItemClicked(item) {\r\n    return () => {\r\n      const isComplete = item.isComplete;\r\n      const todoItems = this.state.todoItems; // tạo 1 todoItems ở đây để ko phải thay đổi todoItems gốc\r\n      const index = todoItems.indexOf(item);\r\n      console.log(item);\r\n      this.setState({\r\n        todoItems: [\r\n          ...todoItems.slice(0, index),\r\n          {\r\n            // ...item,\r\n            title: item.title, // có thể dùng ...item, để viết thay dòng này nhưng viết như thế này để dễ hiểu hơn\r\n            isComplete: !isComplete\r\n          },\r\n          ...todoItems.slice(index + 1)\r\n        ]\r\n      }, () => {\r\n        console.log(this.state.todoItems);\r\n      });\r\n      // thay vì xài slice thì có thể xài map\r\n      // todoItems: this.state.todoItems.map(i => i !== item ? {...i} : {...i, isCompleted: !item.isCompleted})\r\n    };\r\n  }\r\n\r\n  onKeyUp(event) {\r\n    let text = event.target.value;\r\n    let todoItems = this.state.todoItems;\r\n    if (!text) return;\r\n    text = text.trim();\r\n    if (!text) return;\r\n    if (event.keyCode === 13) { // enter có keyCode là 13\r\n      todoItems.unshift({ title: text, isComplete: false });\r\n      this.setState({\r\n        newItem: '',\r\n        todoItems: todoItems\r\n      });\r\n      return;\r\n    }\r\n  }\r\n\r\n  onChange(event) {\r\n    this.setState({ newItem: event.target.value });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App container\">\r\n        <p id=\"react-version\">{React.version}</p>\r\n        <div className=\"Header\">\r\n          <img src={DownArrow} width={32} />\r\n          <Input id=\"firstInput\" type=\"text\" value={this.state.newItem} placeholder=\"Add Task .....\" onKeyUp={this.onKeyUp.bind(this)} onChange={this.onChange.bind(this)} />\r\n        </div>\r\n        <div class=\"row\">\r\n          <div className=\"col-12\">\r\n            { // toán tử && : a && b , a truthy => trả b, a falsy => trả a\r\n              this.state.todoItems.length > 0 && this.state.todoItems.map((item, index) =>\r\n                (<TodoItem key={index} item={item} onClick={this.onItemClicked(item)} />)\r\n              )\r\n            }\r\n            {\r\n              this.state.todoItems.length === 0 && 'Nothing'\r\n            }\r\n          </div>\r\n          <div className=\"col-12\">\r\n            <TrafficLight />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}