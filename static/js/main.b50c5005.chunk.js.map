{"version":3,"sources":["img/check.svg","img/check-done.svg","img/down-arrow.svg","components/TodoItem.js","components/TrafficLight.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TodoItem","item","this","props","onClick","className","url","checkIcon","isComplete","checkDoneIcon","src","width","title","Component","RED","TrafficLight","state","currentColor","setInterval","setState","getNextColor","color","classNames","active","App","newItem","todoItems","index","indexOf","console","log","slice","event","text","target","value","trim","keyCode","unshift","DownArrow","type","placeholder","onKeyUp","bind","onChange","length","map","key","onItemClicked","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b50c5005.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/check.40eb9cc6.svg\";","module.exports = __webpack_public_path__ + \"static/media/check-done.d29f1779.svg\";","module.exports = __webpack_public_path__ + \"static/media/down-arrow.d51c4cbd.svg\";","import React, { Component } from 'react';\r\nimport checkIcon from '../img/check.svg';\r\nimport checkDoneIcon from '../img/check-done.svg';\r\n\r\nclass TodoItem extends Component {\r\n\r\n    render() {\r\n        const item = this.props.item,\r\n            onClick = this.props.onClick;\r\n        let className = 'TodoItem';\r\n        let url = checkIcon;\r\n        if (item.isComplete){\r\n            url = checkDoneIcon;\r\n        }\r\n        if (item.isComplete){\r\n            className += ' TodoItem-complete';\r\n        }\r\n        return (\r\n            <div className={className}>\r\n                <img onClick={onClick} src={url} width={32}/>\r\n                <p>{this.props.item.title}</p>\r\n            </div>      \r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoItem;","import React, { Component } from 'react';\r\nimport classNames from 'classnames';\r\n\r\nconst RED = 0, ORANGE = 1, GREEN = 2;\r\n\r\nclass TrafficLight extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            currentColor: RED\r\n        };\r\n        setInterval(() => {\r\n            this.setState({\r\n                currentColor: this.getNextColor(this.state.currentColor)\r\n            });\r\n        },1000)\r\n    }\r\n\r\n    getNextColor(color){\r\n        switch(color){\r\n            case RED:\r\n                return ORANGE;\r\n            case ORANGE:\r\n                return GREEN;\r\n            default:\r\n                return RED;\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const currentColor = this.state.currentColor;\r\n        return (\r\n            <div className=\"TrafficLight\">\r\n                <div className={classNames('bulb', 'red', {active: currentColor === RED})}/>\r\n                <div className={classNames('bulb', 'orange', {active: currentColor === ORANGE})}/>\r\n                <div className={classNames('bulb', 'green', {active: currentColor === GREEN})}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TrafficLight;","import React, { Component } from 'react';\nimport './App.css';\nimport TodoItem from './components/TodoItem.js';\nimport './components/todoItem.css';\nimport TrafficLight from './components/TrafficLight.js';\nimport './components/TrafficLight.css';\nimport DownArrow from './img/down-arrow.svg';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      newItem: '',\n      todoItems:\n      [\n        {title:\"Learn coding\", isComplete: true},\n        {title:\"Watch twitch\", isComplete: false},\n        {title:\"Play Poe\", isComplete: false}\n      ]\n    };\n  }\n\n  onItemClicked(item){\n      return () => {\n        const isComplete = item.isComplete;\n        const todoItems = this.state.todoItems; // tạo 1 todoItems ở đây để ko phải thay đổi todoItems gốc\n        const index = todoItems.indexOf(item);\n        console.log(item);\n        this.setState({\n          todoItems: [\n            ...todoItems.slice(0, index),\n            {\n              // ...item,\n              title: item.title, // có thể dùng ...item, để viết thay dòng này nhưng viết như thế này để dễ hiểu hơn\n              isComplete: !isComplete\n            },\n            ...todoItems.slice(index+1)\n          ]\n        },() => {\n          console.log(this.state.todoItems);\n        });\n        // thay vì xài slice thì có thể xài map\n        // todoItems: this.state.todoItems.map(i => i !== item ? {...i} : {...i, isCompleted: !item.isCompleted})\n      };\n  }\n\n  onKeyUp(event){\n    let text = event.target.value;\n    let todoItems = this.state.todoItems;\n    if (!text) return;\n    text = text.trim();\n    if (!text) return;\n    if (event.keyCode === 13){ // enter có keyCode là 13\n      todoItems.unshift({title: text, isComplete: false});\n      this.setState({\n        newItem: '',\n        todoItems: todoItems\n      });\n      return;\n    }\n  }\n\n  onChange(event){\n    this.setState({newItem: event.target.value});\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"Header\">\n          <img src={DownArrow} width={32}/>\n          <input type=\"text\" value={this.state.newItem} placeholder=\"Thêm việc cần làm .....\" onKeyUp={this.onKeyUp.bind(this)} onChange={this.onChange.bind(this)}/>\n        </div>\n        { // toán tử && : a && b , a truthy => trả b, a falsy => trả a\n          this.state.todoItems.length > 0 && this.state.todoItems.map((item,index) => (<TodoItem key={index} item={item} onClick={this.onItemClicked(item)}/>))\n        }\n        {\n          this.state.todoItems.length === 0 && 'Nothing'\n        }\n        <TrafficLight/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}